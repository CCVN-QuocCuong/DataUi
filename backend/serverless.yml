service: dataui-api
plugins:
  - serverless-offline
frameworkVersion: ">=2.24.0"
custom:
  profile:
    prod: "dataui-api-prod"
    stg: "dataui-api-stg"
    dev: "dataui-api-dev"
    test: "dataui-api-test"
  splitStacks:
    perFunction: false
    perType: true
    perGroupFunction: false
    nestedStackCount: 20
provider:
  name: aws
  runtime: python3.8
  stage: "${opt:stage, 'dev'}"
  region: "${opt:region, 'ap-southeast-2'}"
  profile: "${self:custom.profile.${self:provider.stage}}"
  environment:
    REGION: ${self:provider.region}
    COGNITO_USER_POOL_ARN: ${file(config/${self:service}-${self:provider.stage}.json):COGNITO_USER_POOL_ARN}
    COGNITO_USER_POOL_ID: ${file(config/${self:service}-${self:provider.stage}.json):COGNITO_USER_POOL_ID}
    COGNITO_USER_CLIENT_ID: ${file(config/${self:service}-${self:provider.stage}.json):COGNITO_USER_CLIENT_ID}
    LAMBDA_PREFIX: ${self:service}-${self:provider.stage}
    DB_HOST: ${file(config/${self:service}-${self:provider.stage}.json):DB_HOST}
    DB_NAME: ${file(config/${self:service}-${self:provider.stage}.json):DB_NAME}
    SECRET_NAME: ${file(config/${self:service}-${self:provider.stage}.json):SECRET_NAME}
    FLCD_ENV_EVENT_BRIDGE_RATING: ${file(config/${self:service}-${self:provider.stage}.json):FLCD_ENV_EVENT_BRIDGE_RATING}
    FLCD_ENV_LAMBDA_FUNCTION_NAME: ${file(config/${self:service}-${self:provider.stage}.json):FLCD_ENV_LAMBDA_FUNCTION_NAME}
    FLCD_ENV_ENPOINT_DOWLOAD_FILES: ${file(config/${self:service}-${self:provider.stage}.json):FLCD_ENV_ENPOINT_DOWLOAD_FILES}
    DATAUI_FILES_STORAGE: ${file(config/${self:service}-${self:provider.stage}.json):DATAUI_FILES_STORAGE}
    DATAUI_LAB_FILES_STORAGE: ${file(config/${self:service}-${self:provider.stage}.json):DATAUI_LAB_FILES_STORAGE}
    HILL_LAB_TRANSFORM_ENV_LAMBDA_FUNCTION_NAME: ${file(config/${self:service}-${self:provider.stage}.json):HILL_LAB_TRANSFORM_ENV_LAMBDA_FUNCTION_NAME}
    ANALYTICA_API_ACCESS_TOKEN_SECRECT_NAME: ${file(config/${self:service}-${self:provider.stage}.json):ANALYTICA_API_ACCESS_TOKEN_SECRECT_NAME}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminSetUserPassword
            - cognito-idp:ChangePassword
            - cognito-idp:AdminRespondToAuthChallenge
            - cognito-idp:ForgotPassword
            - cognito-idp:ConfirmForgotPassword
            - lambda:InvokeFunction
            - lambda:InvokeAsync
          Resource: "*"
        - Effect: Allow
          Action:
            - s3:*
            - lambda:*
          Resource: [
                "arn:aws:s3:::${file(config/${self:service}-${self:provider.stage}.json):DATAUI_FILES_STORAGE}",
                "arn:aws:s3:::${file(config/${self:service}-${self:provider.stage}.json):DATAUI_FILES_STORAGE}/*"
            ]
        - Effect: Allow
          Action:
            - s3:*
            - lambda:*
          Resource: [
                "arn:aws:s3:::${file(config/${self:service}-${self:provider.stage}.json):DATAUI_LAB_FILES_STORAGE}",
                "arn:aws:s3:::${file(config/${self:service}-${self:provider.stage}.json):DATAUI_LAB_FILES_STORAGE}/*"
            ]

        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue 
          Resource: ["arn:aws:secretsmanager:ap-southeast-2:*:secret:*"]

  stackName: "data-ui-${self:provider.stage}-backend-cf"
  stackTags:
    application: ${self:service}
    environment: ${self:provider.stage}
    name: "${self:service}-${self:provider.stage}-backend-cf"
    platform: "aws"
  vpc:
    securityGroupIds:
      - ${file(config/${self:service}-${self:provider.stage}.json):SECURITY_GROUP}
    subnetIds:
      - ${file(config/${self:service}-${self:provider.stage}.json):SECURITY_SUBNET1}
      - ${file(config/${self:service}-${self:provider.stage}.json):SECURITY_SUBNET2}
      - ${file(config/${self:service}-${self:provider.stage}.json):SECURITY_SUBNET3}
functions:
  - ${file(src/api/ui/db/router.yml)}
  # - ${file(src/api/ui/ui/coc/router.yml)}
  # - ${file(src/api/ui/ui/sample/router.yml)}
  # - ${file(src/api/ui/ui/testtype/router.yml)}
  - ${file(src/api/ui/coc/router.yml)}
  - ${file(src/api/ui/noncoc/router.yml)} 
  - ${file(src/api/ui/sample/router.yml)}
  - ${file(src/api/ui/testtype/router.yml)}
  - ${file(src/api/ui/code/router.yml)}
  - ${file(src/api/ui/file/router.yml)}
  - ${file(src/api/ui/labfile/router.yml)}
  - ${file(src/helpers/functions.yml)}
  - ${file(src/api/auth/router.yml)}
  - ${file(src/api/ui/flcd-app/functions.yml)} 
  - ${file(src/api/ui/photo/router.yml)} 
  - ${file(src/api/ui/notification/router.yml)}  
  - ${file(src/api/ui/hill_lab/router.yml)} 
  - ${file(src/api/ui/analytica/router.yml)} 

resources:
  - ${file(resources/api-gateway-errors.yml)}
layers:
  dependencies:
    path: layer/dependencies
    compatibleRuntimes:
      - python3.8
    description: "Dependencies for python functions"
package:
  exclude:
    - node_modules/**