AWSTemplateFormatVersion: '2010-09-09'
Description: VPC with net, data and web subnets (3 AZs)
Parameters:
  Application:
    Description: application name
    Type: String
    Default: update 
  Costcenter:
    Description: cost center
    Type: String
    Default: update
  Platform:
    Description: platform name
    Type: String
    Default: aws      
  Project:
    Description: Project Name
    Type: String
    Default: update
  Environment:
    Description: Deployment environment
    Type: String
    Default: update

  DBUsername:
    NoEcho: "true"
    Default: postgre
    Description: Username for PostgreSQL database access
    Type: String
    MinLength: "1"
    MaxLength: "16"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DatabaseName:
    NoEcho: "true"
    Default: dbaditdev
    Description: Database name for PostgreSQL database
    Type: String
    MinLength: "8"
    MaxLength: "41"
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: must contain only alphanumeric characters.
  
  PostgresVersion:
    Default: '13.7'
    Type: String
    AllowedValues:
      - '13.7'
      - '14.3'
  PostgresEngineMode:
    Default: 'provisioned'
    Type: String
    AllowedValues:
      - 'global'
      - 'provisioned'
  DBInstanceClass:
    Default: db.t4g.medium
    Description: Database Instance Class
    Type: String
    AllowedValues:
    - db.t4g.medium
    - db.t4g.large
    - db.r5.large
    - db.r5.xlarge
    - db.r5.2xlarge
    - db.r5.4xlarge
    - db.r5.8xlarge
    - db.r5.12xlarge
    - db.r5.16xlarge
    - db.r5.24xlarge
    - db.r6g.large
    - db.r6g.xlarge
    - db.r6g.2xlarge
    - db.r6g.4xlarge
    - db.r6g.8xlarge
    - db.r6g.12xlarge
    - db.r6g.16xlarge
    - db.x2g.large
    - db.x2g.xlarge
    - db.x2g.2xlarge
    - db.x2g.4xlarge
    - db.x2g.8xlarge
    - db.x2g.12xlarge
    - db.x2g.16xlarge

  VpcCidr:
    Description: VPC CIDR Range
    Type: String
    Default: ''
  NetSubnetOneCidr:
    Description: Data Subnet Four CIDR Range
    Type: String
    Default: ''
  NetSubnetTwoCidr:
    Description: Data Subnet Five CIDR Range
    Type: String
    Default: ''
  NetSubnetThreeCidr:
    Description: Data Subnet Six CIDR Range
    Type: String
    Default: ''
  DataSubnetOneCidr:
    Description: Data Subnet Four CIDR Range
    Type: String
    Default: ''
  DataSubnetTwoCidr:
    Description: Data Subnet Five CIDR Range
    Type: String
    Default: ''
  DataSubnetThreeCidr:
    Description: Data Subnet Six CIDR Range
    Type: String
    Default: ''
  AppSubnetOneCidr:
    Description: App Subnet One CIDR Range
    Type: String
    Default: ''
  AppSubnetTwoCidr:
    Description: App Subnet Two CIDR Range
    Type: String
    Default: ''
  AppSubnetThreeCidr:
    Description: App Subnet Three CIDR Range
    Type: String
    Default: ''
  WebSubnetOneCidr:
    Description: Web Subnet One CIDR Range
    Type: String
    Default: ''
  WebSubnetTwoCidr:
    Description: Web Subnet Two CIDR Range
    Type: String
    Default: ''
  WebSubnetThreeCidr:
    Description: Web Subnet Three CIDR Range
    Type: String
    Default: ''
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: 
        Ref: VpcCidr
      Tags:
        - Key: "Name"
          Value: !Sub 
          - ${Project}-${Environment}-vpc
          - {Project: !Ref Project, EnvironmentId: !Ref Environment}
        - Key: "environment"
          Value: !Sub
          - ${Environment}
          - {EnvironmentId: !Ref Environment}
        - Key: "application"
          Value: !Sub
          - ${Application}
          - {Application: !Ref Application} 
        - Key: "costcenter"
          Value: !Sub
          - ${Costcenter}
          - {Costcenter: !Ref Costcenter} 
        - Key: "platform"
          Value: !Sub
          - ${Platform}
          - {Platform: !Ref Platform}        
  VpcNacl:
    Type: AWS::EC2::NetworkAcl
    Properties:
       VpcId: !Ref VPC
       Tags:
        - Key: "Name"
          Value: !Sub 
          - ${Project}-${Environment}-vpc
          - {Project: !Ref Project, EnvironmentId: !Ref Environment}
        - Key: "environment"
          Value: !Sub
          - ${Environment}
          - {EnvironmentId: !Ref Environment}
        - Key: "application"
          Value: !Sub
          - ${Application}
          - {Application: !Ref Application} 
        - Key: "costcenter"
          Value: !Sub
          - ${Costcenter}
          - {Costcenter: !Ref Costcenter} 
        - Key: "platform"
          Value: !Sub
          - ${Platform}
          - {Platform: !Ref Platform}  
  # InboundRule:
  #   Type: AWS::EC2::NetworkAclEntry
  #   Properties:
  #      NetworkAclId:
  #        Ref: VpcNacl
  #      RuleNumber: 100
  #      Protocol: -1
  #      Egress: true
  #      RuleAction: allow
  #      CidrBlock: 0.0.0.0/0  
  OutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
         Ref: VpcNacl
       RuleNumber: 100
       Protocol: -1
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0        
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: "Name"
          Value: !Sub 
          - ${Project}-${Environment}-public-rt
          - {Project: !Ref Project, EnvironmentId: !Ref Environment}
        - Key: "environment"
          Value: !Sub
          - ${Environment}
          - {EnvironmentId: !Ref Environment}
        - Key: "application"
          Value: !Sub
          - ${Application}
          - {Application: !Ref Application} 
        - Key: "costcenter"
          Value: !Sub
          - ${Costcenter}
          - {Costcenter: !Ref Costcenter} 
        - Key: "platform"
          Value: !Sub
          - ${Platform}
          - {Platform: !Ref Platform}  
  WebSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      MapPublicIpOnLaunch: true
      CidrBlock:
        Ref: WebSubnetOneCidr
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      Tags:
        - Key: "Name"
          Value: !Sub 
          - ${Project}-${Environment}-web-subnet-1
          - {Project: !Ref Project, EnvironmentId: !Ref Environment}
        - Key: "environment"
          Value: !Sub
          - ${Environment}
          - {EnvironmentId: !Ref Environment}
        - Key: "application"
          Value: !Sub
          - ${Application}
          - {Application: !Ref Application} 
        - Key: "costcenter"
          Value: !Sub
          - ${Costcenter}
          - {Costcenter: !Ref Costcenter} 
        - Key: "platform"
          Value: !Sub
          - ${Platform}
          - {Platform: !Ref Platform}  

  WebSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: WebSubnetOne
      RouteTableId:
        Ref: PublicRouteTable

  WebSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      MapPublicIpOnLaunch: true
      CidrBlock:
        Ref: WebSubnetTwoCidr
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      Tags:
        - Key: "Name"
          Value: !Sub 
          - ${Project}-${Environment}-web-subnet-2
          - {Project: !Ref Project, EnvironmentId: !Ref Environment}
        - Key: "environment"
          Value: !Sub
          - ${Environment}
          - {EnvironmentId: !Ref Environment}
        - Key: "application"
          Value: !Sub
          - ${Application}
          - {Application: !Ref Application} 
        - Key: "costcenter"
          Value: !Sub
          - ${Costcenter}
          - {Costcenter: !Ref Costcenter} 
        - Key: "platform"
          Value: !Sub
          - ${Platform}
          - {Platform: !Ref Platform}  

  WebSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: WebSubnetTwo
      RouteTableId:
        Ref: PublicRouteTable

  WebSubnetThree:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      MapPublicIpOnLaunch: true
      CidrBlock:
        Ref: WebSubnetThreeCidr
      AvailabilityZone:
        Fn::Select:
        - '2'
        - Fn::GetAZs:
            Ref: AWS::Region
      Tags:
        - Key: "Name"
          Value: !Sub 
          - ${Project}-${Environment}-web-subnet-3
          - {Project: !Ref Project, EnvironmentId: !Ref Environment}
        - Key: "environment"
          Value: !Sub
          - ${Environment}
          - {EnvironmentId: !Ref Environment}
        - Key: "application"
          Value: !Sub
          - ${Application}
          - {Application: !Ref Application} 
        - Key: "costcenter"
          Value: !Sub
          - ${Costcenter}
          - {Costcenter: !Ref Costcenter} 
        - Key: "platform"
          Value: !Sub
          - ${Platform}
          - {Platform: !Ref Platform}    

  WebSubnetThreeRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: WebSubnetThree
      RouteTableId:
        Ref: PublicRouteTable
# private subnet 1 start
  PrivateRouteTableOne:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: "Name"
          Value: !Sub 
          - ${Project}-${Environment}-private-rt-1
          - {Project: !Ref Project, EnvironmentId: !Ref Environment}
        - Key: "environment"
          Value: !Sub
          - ${Environment}
          - {EnvironmentId: !Ref Environment}
        - Key: "application"
          Value: !Sub
          - ${Application}
          - {Application: !Ref Application} 
        - Key: "costcenter"
          Value: !Sub
          - ${Costcenter}
          - {Costcenter: !Ref Costcenter} 
        - Key: "platform"
          Value: !Sub
          - ${Platform}
          - {Platform: !Ref Platform}  

  AppSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: AppSubnetOne
      RouteTableId:
        Ref: PrivateRouteTableOne

  AppSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: AppSubnetOneCidr
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      Tags:
        - Key: "Name"
          Value: !Sub 
          - ${Project}-${Environment}-app-subnet-1
          - {Project: !Ref Project, EnvironmentId: !Ref Environment}
        - Key: "environment"
          Value: !Sub
          - ${Environment}
          - {EnvironmentId: !Ref Environment}
        - Key: "application"
          Value: !Sub
          - ${Application}
          - {Application: !Ref Application} 
        - Key: "costcenter"
          Value: !Sub
          - ${Costcenter}
          - {Costcenter: !Ref Costcenter} 
        - Key: "platform"
          Value: !Sub
          - ${Platform}
          - {Platform: !Ref Platform}  
# private subnet 1 end

  PrivateRouteTableTwo:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: "Name"
          Value: !Sub 
          - ${Project}-${Environment}-private-rt-2
          - {Project: !Ref Project, EnvironmentId: !Ref Environment}
        - Key: "environment"
          Value: !Sub
          - ${Environment}
          - {EnvironmentId: !Ref Environment}
        - Key: "application"
          Value: !Sub
          - ${Application}
          - {Application: !Ref Application} 
        - Key: "costcenter"
          Value: !Sub
          - ${Costcenter}
          - {Costcenter: !Ref Costcenter} 
        - Key: "platform"
          Value: !Sub
          - ${Platform}
          - {Platform: !Ref Platform}  

  AppSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: AppSubnetTwo
      RouteTableId:
        Ref: PrivateRouteTableTwo

  AppSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: AppSubnetTwoCidr
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      Tags:
        - Key: "Name"
          Value: !Sub 
          - ${Project}-${Environment}-app-subnet-2
          - {Project: !Ref Project, EnvironmentId: !Ref Environment}
        - Key: "environment"
          Value: !Sub
          - ${Environment}
          - {EnvironmentId: !Ref Environment}
        - Key: "application"
          Value: !Sub
          - ${Application}
          - {Application: !Ref Application} 
        - Key: "costcenter"
          Value: !Sub
          - ${Costcenter}
          - {Costcenter: !Ref Costcenter} 
        - Key: "platform"
          Value: !Sub
          - ${Platform}
          - {Platform: !Ref Platform}  

  AppSubnetThreeRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: AppSubnetThree
      RouteTableId:
        Ref: PrivateRouteTableTwo

  AppSubnetThree:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: AppSubnetThreeCidr
      AvailabilityZone:
        Fn::Select:
        - '2'
        - Fn::GetAZs:
            Ref: AWS::Region
      Tags:
        - Key: "Name"
          Value: !Sub 
          - ${Project}-${Environment}-app-subnet-3
          - {Project: !Ref Project, EnvironmentId: !Ref Environment}
        - Key: "environment"
          Value: !Sub
          - ${Environment}
          - {EnvironmentId: !Ref Environment}
        - Key: "application"
          Value: !Sub
          - ${Application}
          - {Application: !Ref Application} 
        - Key: "costcenter"
          Value: !Sub
          - ${Costcenter}
          - {Costcenter: !Ref Costcenter} 
        - Key: "platform"
          Value: !Sub
          - ${Platform}
          - {Platform: !Ref Platform}  

  DataSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: DataSubnetOne
      RouteTableId:
        Ref: PrivateRouteTableTwo

  DataSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: DataSubnetOneCidr
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      Tags:
        - Key: "Name"
          Value: !Sub 
          - ${Project}-${Environment}-data-subnet-1
          - {Project: !Ref Project, EnvironmentId: !Ref Environment}
        - Key: "environment"
          Value: !Sub
          - ${Environment}
          - {EnvironmentId: !Ref Environment}
        - Key: "application"
          Value: !Sub
          - ${Application}
          - {Application: !Ref Application} 
        - Key: "costcenter"
          Value: !Sub
          - ${Costcenter}
          - {Costcenter: !Ref Costcenter} 
        - Key: "platform"
          Value: !Sub
          - ${Platform}
          - {Platform: !Ref Platform}  

  DataSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: DataSubnetTwo
      RouteTableId:
        Ref: PrivateRouteTableTwo

  DataSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: DataSubnetTwoCidr
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      Tags:
        - Key: "Name"
          Value: !Sub 
          - ${Project}-${Environment}-data-subnet-2
          - {Project: !Ref Project, EnvironmentId: !Ref Environment}
        - Key: "environment"
          Value: !Sub
          - ${Environment}
          - {EnvironmentId: !Ref Environment}
        - Key: "application"
          Value: !Sub
          - ${Application}
          - {Application: !Ref Application} 
        - Key: "costcenter"
          Value: !Sub
          - ${Costcenter}
          - {Costcenter: !Ref Costcenter} 
        - Key: "platform"
          Value: !Sub
          - ${Platform}
          - {Platform: !Ref Platform}  

  DataSubnetThreeRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: DataSubnetThree
      RouteTableId:
        Ref: PrivateRouteTableTwo 

  DataSubnetThree:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: DataSubnetThreeCidr
      AvailabilityZone:
        Fn::Select:
        - '2'
        - Fn::GetAZs:
            Ref: AWS::Region
      Tags:
        - Key: "Name"
          Value: !Sub 
          - ${Project}-${Environment}-data-subnet-3
          - {Project: !Ref Project, EnvironmentId: !Ref Environment}
        - Key: "environment"
          Value: !Sub
          - ${Environment}
          - {EnvironmentId: !Ref Environment}
        - Key: "application"
          Value: !Sub
          - ${Application}
          - {Application: !Ref Application} 
        - Key: "costcenter"
          Value: !Sub
          - ${Costcenter}
          - {Costcenter: !Ref Costcenter} 
        - Key: "platform"
          Value: !Sub
          - ${Platform}
          - {Platform: !Ref Platform}

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Lambda security group
      GroupName: !Sub 
          - ${Project}-${Environment}-lambda-sg
          - {Project: !Ref Project, EnvironmentId: !Ref Environment}
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        CidrIp:  
          Ref: VpcCidr  
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        CidrIp: 0.0.0.0/0

  # Create group for connect from lambda function to RDS AuroraPostgre        
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTPS ingress
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        CidrIp:  
          Ref: VpcCidr 

      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        SourceSecurityGroupId: !Ref SecurityGroup 
      Tags:
        - Key: "Name"
          Value: !Sub 
          - ${Project}-${Environment}-lambda-sg
          - {Project: !Ref Project, EnvironmentId: !Ref Environment}
        - Key: "environment"
          Value: !Sub
          - ${Environment}
          - {EnvironmentId: !Ref Environment}
        - Key: "application"
          Value: !Sub
          - ${Application}
          - {Application: !Ref Application} 
        - Key: "costcenter"
          Value: !Sub
          - ${Costcenter}
          - {Costcenter: !Ref Costcenter} 
        - Key: "platform"
          Value: !Sub
          - ${Platform}
          - {Platform: !Ref Platform}
 
  EndpointS3:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      RouteTableIds: [ !Ref PublicRouteTable, !Ref PrivateRouteTableOne , !Ref PrivateRouteTableTwo ]
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref VPC
       
  EndpointLambda:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.lambda' 
      VpcId: !Ref VPC

  Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'vpc-flow-logs.amazonaws.com'
          Action: 'sts:AssumeRole'
      RoleName: !Sub 
        - ${Project}-${Environment}-flow-log-role
        - {Project: !Ref Project, EnvironmentId: !Ref Environment}    
      Policies:
      - PolicyName: 'flowlogs-policy'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            - 'logs:DescribeLogGroups'
            - 'logs:DescribeLogStreams'
            Resource: !GetAtt 'LogGroup.Arn'
 
  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub 
        - ${Project}-${Environment}-flow-log-group
        - {Project: !Ref Project, EnvironmentId: !Ref Environment}
  
  FlowLog:
    Type: 'AWS::EC2::FlowLog'
    Properties:
      DeliverLogsPermissionArn: !GetAtt 'Role.Arn'
      LogGroupName: !Ref LogGroup
      ResourceId: !Ref VPC
      ResourceType: 'VPC'
      TrafficType: ALL        
  
  # Secrets Manager secret
  DBSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub '${Project}-${Environment}-aurora-postgre-secret'
      Description: RDS database auto-generated user password
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${DBUsername}"}'
        GenerateStringKey: password
        PasswordLength: 30
        ExcludeCharacters: '"@/\'
      Tags:
          - Key: "Name"
            Value: !Sub 
            - ${Project}-${Environment}-aurora-postgre-secret
            - {Project: !Ref Project, EnvironmentId: !Ref Environment}
          - Key: "environment"
            Value: !Sub
            - ${Environment}
            - {EnvironmentId: !Ref Environment}
          - Key: "application"
            Value: !Sub
            - ${Application}
            - {Application: !Ref Application} 
          - Key: "costcenter"
            Value: !Sub
            - ${Costcenter}
            - {Costcenter: !Ref Costcenter} 
          - Key: "platform"
            Value: !Sub
            - ${Platform}
            - {Platform: !Ref Platform}  

  #Create Aurora Postgres database
  RDSCluster: 
    Type: AWS::RDS::DBCluster
    Properties:
      MasterUsername: !Sub '{{resolve:secretsmanager:${DBSecret}:SecretString:username}}' 
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${DBSecret}:SecretString:password}}'
      DatabaseName: !Join ["", ["db",!Ref Project, !Ref Environment]]
      DBClusterIdentifier: !Sub 
        - ${Project}-${Environment}-aurora-multiaz01
        - {Project: !Ref Project, EnvironmentId: !Ref Environment} 
      Engine: aurora-postgresql  
      EngineVersion: !Ref PostgresVersion
      EngineMode: !Ref PostgresEngineMode
      Port: '5432'
      EnableIAMDatabaseAuthentication: 'true'
      AvailabilityZones: 
        Fn::GetAZs:
            Ref: AWS::Region
      DBSubnetGroupName: !Ref DBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref SecurityGroup
      Tags:
        - Key: "Name"
          Value: !Sub 
          - ${Project}-${Environment}-aurora-multiaz
          - {Project: !Ref Project, EnvironmentId: !Ref Environment}
        - Key: "environment"
          Value: !Sub
          - ${Environment}
          - {EnvironmentId: !Ref Environment}
        - Key: "application"
          Value: !Sub
          - ${Application}
          - {Application: !Ref Application} 
        - Key: "costcenter"
          Value: !Sub
          - ${Costcenter}
          - {Costcenter: !Ref Costcenter} 
        - Key: "platform"
          Value: !Sub
          - ${Platform}
          - {Platform: !Ref Platform}

  RDSDBInstance:
    Type: "AWS::RDS::DBInstance"
    Properties: 
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      DBClusterIdentifier: 
        Ref: RDSCluster
      DBInstanceClass: !Ref DBInstanceClass
      Engine: aurora-postgresql
      PubliclyAccessible: "false"
      DeleteAutomatedBackups: true
      Tags:
        - Key: "Name"
          Value: !Sub 
          - ${Project}-${Environment}-aurora-db-instance
          - {Project: !Ref Project, EnvironmentId: !Ref Environment}
        - Key: "environment"
          Value: !Sub
          - ${Environment}
          - {EnvironmentId: !Ref Environment}
        - Key: "application"
          Value: !Sub
          - ${Application}
          - {Application: !Ref Application} 
        - Key: "costcenter"
          Value: !Sub
          - ${Costcenter}
          - {Costcenter: !Ref Costcenter} 
        - Key: "platform"
          Value: !Sub
          - ${Platform}
          - {Platform: !Ref Platform} 

  RDSDBInstance2:
    Type: "AWS::RDS::DBInstance"
    Properties: 
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      DBClusterIdentifier: 
        Ref: RDSCluster
      DBInstanceClass: db.t4g.medium
      Engine: aurora-postgresql
      PubliclyAccessible: "false"
      DeleteAutomatedBackups: true
      Tags:
        - Key: "Name"
          Value: !Sub 
          - ${Project}-${Environment}-aurora-db-instance2
          - {Project: !Ref Project, EnvironmentId: !Ref Environment}
        - Key: "environment"
          Value: !Sub
          - ${Environment}
          - {EnvironmentId: !Ref Environment}
        - Key: "application"
          Value: !Sub
          - ${Application}
          - {Application: !Ref Application} 
        - Key: "costcenter"
          Value: !Sub
          - ${Costcenter}
          - {Costcenter: !Ref Costcenter} 
        - Key: "platform"
          Value: !Sub
          - ${Platform}
          - {Platform: !Ref Platform}

  # RDSDBInstance3:
  #   Type: "AWS::RDS::DBInstance"
  #   Properties: 
  #     AvailabilityZone:
  #       Fn::Select:
  #       - '2'
  #       - Fn::GetAZs:
  #           Ref: AWS::Region
  #     DBClusterIdentifier: 
  #       Ref: RDSCluster
  #     DBInstanceClass: db.t4g.medium
  #     Engine: aurora-postgresql
  #     PubliclyAccessible: "false"      
  #     DeleteAutomatedBackups: true
  #     Tags:
  #       - Key: "Name"
  #         Value: !Sub 
  #         - ${Project}-${Environment}-aurora-db-instance3
  #         - {Project: !Ref Project, EnvironmentId: !Ref Environment}
  #       - Key: "environment"
  #         Value: !Sub
  #         - ${Environment}
  #         - {EnvironmentId: !Ref Environment}
  #       - Key: "application"
  #         Value: !Sub
  #         - ${Application}
  #         - {Application: !Ref Application} 
  #       - Key: "costcenter"
  #         Value: !Sub
  #         - ${Costcenter}
  #         - {Costcenter: !Ref Costcenter} 
  #       - Key: "platform"
  #         Value: !Sub
  #         - ${Platform}
  #         - {Platform: !Ref Platform}

  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupName: !Sub 
        - ${Project}-${Environment}-aurora-multiaz-subnetgroup
        - {Project: !Ref Project, EnvironmentId: !Ref Environment} 
      DBSubnetGroupDescription: "DB Subnet Group Description for Aurora"
      SubnetIds:
        - Ref: DataSubnetOne
        - Ref: DataSubnetTwo
        - Ref: DataSubnetThree
      Tags:
          - Key: "Name"
            Value: !Sub 
            - ${Project}-${Environment}-aurora-multiaz-subnetgroup
            - {Project: !Ref Project, EnvironmentId: !Ref Environment}
          - Key: "environment"
            Value: !Sub
            - ${Environment}
            - {EnvironmentId: !Ref Environment}
          - Key: "application"
            Value: !Sub
            - ${Application}
            - {Application: !Ref Application} 
          - Key: "costcenter"
            Value: !Sub
            - ${Costcenter}
            - {Costcenter: !Ref Costcenter} 
          - Key: "platform"
            Value: !Sub
            - ${Platform}
            - {Platform: !Ref Platform} 

  SecretsManagerVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.secretsmanager'
      PrivateDnsEnabled: True
      SubnetIds: 
        - !Ref DataSubnetOne
        - !Ref DataSubnetTwo
        - !Ref DataSubnetThree
      VpcEndpointType: Interface
      VpcId: !Ref VPC 
      SecurityGroupIds:
        - !Ref SecurityGroup

  SecretResourcePolicy:
    Type: AWS::SecretsManager::ResourcePolicy
    Properties:
      BlockPublicPolicy: True
      SecretId:
        Ref: DBSecret
      ResourcePolicy:
        Statement:
          - Sid: RestrictGetSecretValueoperation
            Effect: Allow
            Principal: "*"
            Action: secretsmanager:GetSecretValue
            Resource: "*"
            Condition:
              StringEquals:
                aws:sourceVpc: !Ref VPC

Outputs:
  StackVPC:
    Description: The ID of the VPC
    Value:
      Ref: VPC
    Export:
      Name: !Sub '${AWS::StackName}-VirtualPrivateCloud'
  PrimaryWebSubnet:
    Description: The ID of web subnet 1
    Value:
      Ref: WebSubnetOne
    Export:
      Name: !Sub '${AWS::StackName}-WebSubnetOne'
  SecondaryWebSubnet:
    Description: The ID of web subnet 2
    Value:
      Ref: WebSubnetTwo
    Export:
      Name: !Sub '${AWS::StackName}-WebSubnetTwo'
  ThirdWebSubnet:
    Description: The ID of web subnet 3
    Value:
      Ref: WebSubnetThree
    Export:
      Name: !Sub '${AWS::StackName}-WebSubnetThree'
  PrimaryAppSubnet:
    Description: The ID of app subnet 1
    Value:
      Ref: AppSubnetOne
    Export:
      Name: !Sub '${AWS::StackName}-AppSubnetOne'
  SecondaryAppSubnet:
    Description: The ID of app subnet 2
    Value:
      Ref: AppSubnetTwo
    Export:
      Name: !Sub '${AWS::StackName}-AppSubnetTwo'
  ThirdAppSubnet:
    Description: The ID of app subnet 3
    Value:
      Ref: AppSubnetThree
    Export:
      Name: !Sub '${AWS::StackName}-AppSubnetThree'
  PrimaryDataSubnet:
    Description: The ID of data subnet 1
    Value:
      Ref: DataSubnetOne
    Export:
      Name: !Sub '${AWS::StackName}-DataSubnetOne'
  SecondaryDataSubnet:
    Description: The ID of data subnet 2
    Value:
      Ref: DataSubnetTwo
    Export:
      Name: !Sub '${AWS::StackName}-DataSubnetTwo'
  ThirdDataSubnet:
    Description: The ID of data subnet 3
    Value:
      Ref: DataSubnetThree
    Export:
      Name: !Sub '${AWS::StackName}-DataSubnetThree'
  # RDSCluster:
  #   Description: RDSCluster
  #   Value:
  #     Ref: RDSCluster
  #   Export:
  #     Name: !Sub '${AWS::StackName}-RDSCluster' 